plugins() {
	id('fabric-loom') version('1.8-SNAPSHOT')
	//id('maven-publish')
}

version = project.mod_version
group   = project.maven_group

repositories() {
	//Add repositories to retrieve artifacts from in here.
	//You should only use this when depending on other mods because
	//Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	//See https://docs.gradle.org/current/userguide/declaring_repositories.html
	//for more information about repositories.

	maven() {
		url('https://api.modrinth.com/maven')
	}

	//cardinal components
	maven() {
		url('https://maven.ladysnake.org/releases')
	}

	//AutoCodec
	mavenLocal()

	//manifold
	maven() {
		url('https://oss.sonatype.org/content/repositories/snapshots/')
	}

	//computercraft
	maven() {
		url('https://maven.squiddev.cc')
		content() {
			includeGroup("cc.tweaked")
		}
	}
}

dependencies() {
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	include(implementation('builderb0y:autocodec:5.0.0') {
		transitive = false
	})

	//include(modImplementation('maven.modrinth:jmxl:1.5+mc1.21'))
	modCompileOnly('maven.modrinth:lambdynamiclights:3.2.1+1.21.3')
	modImplementation('maven.modrinth:cloth-config:16.0.141+fabric')
	modImplementation('maven.modrinth:modmenu:12.0.0-beta.1')
	modCompileOnly("cc.tweaked:cc-tweaked-1.21.1-fabric-api:1.113.1")

	//modImplementation('maven.modrinth:sodium:mc1.21-0.5.11')
	//modRuntimeOnly('maven.modrinth:indium:1.0.34+mc1.21')

	//cardinal components.
	include(modImplementation('org.ladysnake.cardinal-components-api:cardinal-components-base:6.2.0'))
	include(modImplementation('org.ladysnake.cardinal-components-api:cardinal-components-world:6.2.0'))
	include(modImplementation('org.ladysnake.cardinal-components-api:cardinal-components-chunk:6.2.0'))

	//manifold.
	String manifoldVersion = '2024.1.37'
	annotationProcessor("systems.manifold:manifold-strings:$manifoldVersion")
	for (String name : [ 'ext' /*, 'props', 'tuple' */ ]) {
		annotationProcessor("systems.manifold:manifold-$name:$manifoldVersion")
		implementation("systems.manifold:manifold-$name-rt:$manifoldVersion")
		include("systems.manifold:manifold-$name-rt:$manifoldVersion")
	}
	include(implementation("systems.manifold:manifold-rt:$manifoldVersion"))
	include(implementation("systems.manifold:manifold-util:$manifoldVersion"))

	testImplementation('junit:junit:4.13.2')

	//everything else that's not required but I like to use in-game.
	modImplementation(fileTree("dependencies/${project.minecraft_version}/implementation"))
	modCompileOnly(fileTree("dependencies/${project.minecraft_version}/compileOnly"))
	modRuntimeOnly(fileTree("dependencies/${project.minecraft_version}/runtimeOnly"))
}

test() {
	useJUnit()
}

loom() {
	accessWidenerPath = file('src/main/resources_core/bigtech.accesswidener')
}

sourceSets() {
	main() {
		resources() {
			srcDir(file('src/main/resources_core'))
		}
	}
}

compileJava() {
	options.compilerArgs.addAll([ '-parameters', '-Xplugin:Manifold no-bootstrap' ])
}

processResources() {
	inputs.property('version', project.version)
	inputs.property('minecraft_version', project.minecraft_version)
	inputs.property('loader_version', project.loader_version)
	filteringCharset('UTF-8')

	filesMatching('fabric.mod.json') {
		expand(
			'version': project.version,
			'minecraft_version': project.minecraft_version,
			'loader_version': project.loader_version
		)
	}
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach() {
	//ensure that the encoding is set to UTF-8, no matter what the system default is
	//this fixes some edge cases with special characters not displaying correctly
	//see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	//If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = 'UTF-8'
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java() {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	//Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	//if it is present.
	//If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar() {
	from('LICENSE') {
		rename() { "${it}_${project.archivesBaseName}" }
	}
}

task copyToReleases(type: Copy) {
	dependsOn(remapJar)
	from("$projectDir/build/libs") {
		include("$archivesBaseName-${project.version}.jar")
		rename() {
			"$archivesBaseName-$project.version-MC${minecraft_version}.jar"
		}
	}
	into(file("releases/${project.version.toString().replace('.' as char, '/' as char)}"))
}

build() {
	dependsOn(copyToReleases)
}

/*
//configure the maven publication
publishing() {
	publications() {
		mavenJava(MavenPublication) {
			from(components.java)
		}
	}

	//See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories() {
		//Add repositories to publish to here.
		//Notice: This block does NOT have the same function as the block in the top level.
		//The repositories here will be used for publishing your artifact, not for
		//retrieving dependencies.
	}
}
*/